name: Test

on:
  workflow_call:
    inputs:
      artifact_path:
        required: false
        type: string
      ci_size:
        default: medium
        required: false
        type: string
      custom_test_command:
        required: false
        type: string
      dot_env_path:
        default: .env
        required: false
        type: string
      environment:
        required: false
        type: string
      github_hosted_runner:
        required: false
        type: boolean
      runs_on:
        required: false
        type: string
      target_organization:
        required: false
        type: string
    secrets:
      DOT_ENV:
        required: false
      GH_TOKEN:
        required: true
      NPM_TOKEN:
        required: false
jobs:
  pre:
    if: ${{ !startsWith(github.head_ref, 'refs/heads/renovate/') && github.head_ref != 'refs/heads/wbfy' && (!inputs.target_organization || github.repository_owner == inputs.target_organization) }}
    runs-on: ${{ (inputs.runs_on && fromJSON(inputs.runs_on)) || ((!github.event.repository.private || inputs.github_hosted_runner) && 'ubuntu-latest') || fromJSON('["self-hosted", "medium"]') }}
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - name: Add Homebrew to PATH for Apple Silicon
        run: echo "/opt/homebrew/bin" >> $GITHUB_PATH
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          cancel_others: false
          skip_after_successful_duplicate: true
          paths_ignore: '["**.md", "**/docs/**"]'
  detect-node-version-matrix:
    needs: pre
    if: ${{ needs.pre.outputs.should_skip != 'true' }}
    runs-on: ${{ (inputs.runs_on && fromJSON(inputs.runs_on)) || ((!github.event.repository.private || inputs.github_hosted_runner) && 'ubuntu-latest') || fromJSON('["self-hosted", "medium"]') }}
    outputs:
      json: ${{ steps.detect-node-version-matrix.outputs.json }}
    steps:
      - name: Add Homebrew to PATH for Apple Silicon
        run: echo "/opt/homebrew/bin" >> $GITHUB_PATH
      - uses: actions/checkout@v4
      # We need Node.js only if `grep -q nodejs .tool-versions && [[ ! -f .node-version ]]`
      - id: check-node
        run: |
          if ! grep -q "node" .tool-versions && [[ ! -f .node-version ]] && [[ ! $(node --version) ]] && [[ ! $(npx --version) ]]; then
            echo "require-node-install=1" >> $GITHUB_OUTPUT
          fi
      - if: ${{ steps.check-node.outputs.require-node-install }}
        uses: actions/setup-node@v4
        with:
          check-latest: true
      - id: detect-node-version-matrix
        # We must use actions/setup-node if no Node.js description exists in .tool-versions and no .node-version exists
        run: |
          NODE_VERSIONS=""
          if ! grep -q "node" .tool-versions && [[ ! -f .node-version ]]; then
            CONSTRAINT=$(node -e "console.log(((require('./package.json') || {}).engines || {}).node)")
            NODE_VERSIONS=$(npx -y semver -r "$CONSTRAINT" 14.999.999 16.999.999 18.999.999 20.999.999 | xargs | sed 's/ /","/g' | sed 's/\.999\.999//g')
          fi
          echo "json=[\"$NODE_VERSIONS\"]" >> $GITHUB_OUTPUT
  test:
    needs: detect-node-version-matrix
    runs-on: ${{ (inputs.runs_on && fromJSON(inputs.runs_on)) || ((!github.event.repository.private || inputs.github_hosted_runner) && 'ubuntu-latest') || fromJSON(format('["self-hosted", "{0}"]', inputs.ci_size)) }}
    env:
      FORCE_COLOR: 3
      # arguments
      HAS_DOT_ENV: ${{ !!secrets.DOT_ENV }}
      HAS_TEST_COMMAND: ${{ !!inputs.custom_test_command }}
      WB_ENV: ${{ inputs.environment }}
    strategy:
      matrix:
        # c.f. https://github.community/t/reusable-workflow-with-strategy-matrix/205676
        node-version: ${{ fromJson(needs.detect-node-version-matrix.outputs.json) }}
    steps:
      - name: Add Homebrew to PATH for Apple Silicon
        run: echo "/opt/homebrew/bin" >> $GITHUB_PATH
      - uses: fkirc/skip-duplicate-actions@master
        with:
          cancel_others: true
      - uses: actions/checkout@v4
        # To trigger other workflows when running 'git push'
        with:
          token: ${{ secrets.GH_TOKEN }}
      - if: ${{ env.HAS_DOT_ENV == 'true' }}
        run: echo '${{ secrets.DOT_ENV }}' > ${{ inputs.dot_env_path }}

      - name: Check version files
        id: check-ver
        run: |
          if [[ -f .tool-versions || -f .node-version || -f .python-version ]]; then
            echo "exist-any-version=1" >> $GITHUB_OUTPUT
          fi
          if [[ -f .node-version ]] || grep -q nodejs .tool-versions; then
            echo "exist-nodejs-version=1" >> $GITHUB_OUTPUT
          fi
      - if: ${{ !steps.check-ver.outputs.exist-nodejs-version }}
        uses: actions/setup-node@v4
        with:
          check-latest: true
          node-version: ${{ matrix.node-version || 20 }}
      - if: ${{ steps.check-ver.outputs.exist-any-version }}
        uses: willbooster/asdf-actions/install@main
      - name: Show environment information
        id: env-info
        # https://stackoverflow.com/a/677212
        run: |
          echo "WB_ENV: $WB_ENV"
          echo "node: $(node -v)"
          echo "npm: $(npm -v)"
          if [[ -f bunfig.toml ]] && grep -q bun .tool-versions; then
            echo "bun: $(bun -v)"
            echo "runner=bun" >> $GITHUB_OUTPUT
          else
            YARN=$(yarn -v); echo "yarn: $YARN"
            if [[ "$YARN" == "1."* ]]; then
              echo "yarn-dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
            fi
            echo "runner=yarn" >> $GITHUB_OUTPUT
          fi

          if PYTHON=$(python --version 2> /dev/null); then echo "python: $PYTHON"; fi
          if POETRY=$(poetry --version 2> /dev/null); then
            echo "poetry: $POETRY"
            poetry config virtualenvs.in-project true
            poetry config virtualenvs.prefer-active-python true
          fi

      - if: ${{ steps.env-info.outputs.yarn-dir }}
        uses: actions/cache@v4
        with:
          path: ${{ steps.env-info.outputs.yarn-dir }}
          # Don't use **/yarn.lock because it scans yarn.lock in node_modules
          # c.f. https://github.com/AllanChain/blog/issues/98
          key: ${{ runner.os }}-yarn-v1-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-v1-

      - name: Install dependencies
        run: |
          if [[ "${{ steps.env-info.outputs.runner }}" == "bun" ]]; then
            bun update
          else
            ${{ steps.env-info.outputs.runner }} install --no-immutable || true # To ignore postinstall errors
          fi
      - name: Run "common/ci-setup" npm script if exists
        run: if grep -q '"common/ci-setup":' package.json; then ${{ steps.env-info.outputs.runner }} run common/ci-setup; fi
      - name: Run "test/ci-setup" npm script if exists
        run: if grep -q '"test/ci-setup":' package.json; then ${{ steps.env-info.outputs.runner }} run test/ci-setup; fi
      - name: Run "typecheck" npm script if exists
        run: if grep -q '"typecheck":' package.json; then ${{ steps.env-info.outputs.runner }} run typecheck; fi
      - name: Lint & Build
        run: |
          if grep -q '"lint-fix":' package.json; then
            ${{ steps.env-info.outputs.runner }} run lint-fix
          elif grep -q '"lint":' package.json; then
            ${{ steps.env-info.outputs.runner }} run lint
          fi
          if grep -q '"build/ci":' package.json; then
            ${{ steps.env-info.outputs.runner }} run build/ci
          elif grep -q '"build":' package.json; then
            ${{ steps.env-info.outputs.runner }} run build
          fi
          if git status | grep -q "Changes not staged for commit"; then
            git status
            echo "Found changes during lint-fix and/or build"
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              git stash
              git fetch origin ${{ github.head_ref }}
              git switch ${{ github.head_ref }}
              git stash pop
              git config --global user.email "bot@willbooster.com"
              git config --global user.name "WillBooster Inc."
              git add -A
              git commit -m "fix: apply changes by lint-fix and build" -a
              git push origin ${{ github.head_ref }}
            fi
            exit 1
          fi
      - name: Test
        run: |
          if [[ "${{ env.HAS_TEST_COMMAND }}" == "true" ]]; then
            ${{ steps.env-info.outputs.runner }} run ${{ inputs.custom_test_command }}
          elif grep -q '"test/ci":' package.json; then
            ${{ steps.env-info.outputs.runner }} run test/ci
          elif grep -q '"test":' package.json; then
            ${{ steps.env-info.outputs.runner }} run test
          fi
      - name: Run lint-staged
        run: |
          if grep -q '"lint-staged":' package.json; then
            for file in $(ls package.json packages/*/package.json); do
              sed -i -e 's/"name":/"name" :/' $file
              git add -A
            done
            ${{ steps.env-info.outputs.runner }} run lint-staged --allow-empty
          fi
      - name: Test release script
        if: ${{ env.GITHUB_TOKEN != '' && github.event_name == 'pull_request' }}
        run: |
          if grep -q '"semantic-release":' package.json && [[ $(node --version) > "v20" ]]; then
            git switch -C $(jq -r ".branches[0]" .releaserc.json)
            if grep -q '"release-test":' package.json; then
              ${{ steps.env-info.outputs.runner }} run release-test
            else
              ${{ steps.env-info.outputs.runner }} run semantic-release --dry-run
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - if: ${{ inputs.artifact_path }}
        uses: actions/upload-artifact@v4
        with:
          name: test-artifact
          path: ${{ inputs.artifact_path }}

      - if: ${{ always() }}
        name: Clean up pyc files and docker
        run: |
          # pyc
          sudo rm -f **/*.pyc &
          # Docker
          true $(docker rm -f $(docker ps -q) 2> /dev/null)
          true $(docker system prune -a -f --filter "until=4h")
          if [[ ! $(docker ps) ]]; then
            (which docker && sleep 5 && sudo reboot) &
          fi
