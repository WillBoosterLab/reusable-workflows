name: Test

on:
  workflow_call:
    inputs:
      artifact_path:
        required: false
        type: string
      cpu_arch:
        required: false
        type: string
      dot_env_path:
        required: false
        type: string
      environment:
        required: false
        type: string
      force_github_host:
        required: false
        type: boolean
      # TODO(exkazuu): remove the following inputs
      non_self_hosted:
        required: false
        type: boolean
    secrets:
      DOT_ENV:
        required: false
      GH_TOKEN:
        required: false
      NPM_TOKEN:
        required: false
jobs:
  pre:
    runs-on: ${{ ((!github.event.repository.private || inputs.force_github_host) && 'ubuntu-latest') || (inputs.cpu_arch == 'X64' && fromJSON('["self-hosted", "large", "X64"]')) || (inputs.cpu_arch == 'ARM64' && fromJSON('["self-hosted", "large", "ARM64"]')) || fromJSON('["self-hosted", "large"]') }}
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          cancel_others: false
          skip_after_successful_duplicate: true
          concurrent_skipping: same_content_newer
          paths_ignore: '["**/*.md", "**/docs/**"]'
  detect-node-version-matrix:
    needs: pre
    if: ${{ needs.pre.outputs.should_skip != 'true' }}
    runs-on: ${{ ((!github.event.repository.private || inputs.force_github_host) && 'ubuntu-latest') || (inputs.cpu_arch == 'X64' && fromJSON('["self-hosted", "large", "X64"]')) || (inputs.cpu_arch == 'ARM64' && fromJSON('["self-hosted", "large", "ARM64"]')) || fromJSON('["self-hosted", "large"]') }}
    env:
      # arguments
      ENVIRONMENT: ${{ inputs.environment }}
    outputs:
      json: ${{ steps.detect-node-version-matrix.outputs.json }}
    steps:
      - uses: actions/checkout@v2
      # We need Node.js only if [[ "$(cat .tool-versions)" != *"node"* ]]
      - id: check-node
        run: |
          if [[ "$(cat .tool-versions)" != *"node"* ]] && [[ ! $(node --version) ]]; then
            echo "::set-output name=require-install::1"
          fi
      - if: ${{ steps.check-node.outputs.require-install }}
        uses: actions/setup-node@v2
      - if: ${{ steps.check-node.outputs.require-install }}
        run: |
          asdf plugin add nodejs || true
          asdf local nodejs system || true
      - id: detect-node-version-matrix
        # We must use actions/setup-node if no Node.js description exists in .tool-versions
        run: |
          NODE_VERSIONS=""
          if [[ "$(cat .tool-versions)" != *"node"* ]]; then
            CONSTRAINT=$(node -e "console.log(((require('./package.json') || {}).engines || {}).node)")
            NODE_VERSIONS=$(npx -y semver -r "$CONSTRAINT" 14.999.999 16.999.999 17.999.999 | xargs | sed 's/ /","/g' | sed 's/\.999\.999//g')
          fi
          echo "::set-output name=json::[\"$NODE_VERSIONS\"]"
  test:
    needs: detect-node-version-matrix
    runs-on: ${{ ((!github.event.repository.private || inputs.force_github_host) && 'ubuntu-latest') || (inputs.cpu_arch == 'X64' && fromJSON('["self-hosted", "large", "X64"]')) || (inputs.cpu_arch == 'ARM64' && fromJSON('["self-hosted", "large", "ARM64"]')) || fromJSON('["self-hosted", "large"]') }}
    strategy:
      matrix:
        # c.f. https://github.community/t/reusable-workflow-with-strategy-matrix/205676
        node-version: ${{ fromJson(needs.detect-node-version-matrix.outputs.json) }}
    steps:
      - uses: fkirc/skip-duplicate-actions@master
        with:
          cancel_others: true
      - uses: actions/checkout@v2
      - if: ${{ inputs.dot_env_path }}
        run: echo "${{ secrets.DOT_ENV }}" > ${{ inputs.dot_env_path }}

      # We prefer actions/setup-node to asdf because asdf is slow on GitHub runners
      # However, we must use asdf if .tool-versions since it may install some tools other than Node.js
      - id: get-ver
        run: |
          if [[ -f .tool-versions ]]; then
            echo "::set-output name=exist-tool-versions::1";
          fi
          if [[ "$(cat .tool-versions)" != *"node"* ]]; then
            echo "::set-output name=node::$(cat .node-version || echo 16)";
          fi
      - if: ${{ steps.get-ver.outputs.exist-tool-versions }}
        uses: willbooster/asdf-actions/install@main
      - if: ${{ steps.get-ver.outputs.node }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version || steps.get-ver.outputs.node }}
      - if: ${{ steps.get-ver.outputs.node }}
        run: |
          asdf plugin add nodejs || true
          asdf plugin add yarn || true
          asdf local nodejs system && asdf local yarn system
          if [[ ! $(yarn --version) ]]; then
            asdf install yarn 1.22.17 && asdf local yarn 1.22.17
          fi
      - name: Show environment information
        id: env-info
        # https://stackoverflow.com/a/677212
        run: |
          echo "node: $(node -v)"
          echo "yarn: $(yarn -v)"
          if command -v python &> /dev/null; then echo "python: $(python --version)"; fi
          if command -v poetry &> /dev/null; then echo "poetry: $(poetry --version)"; fi
          if command -v gcloud &> /dev/null; then echo "gcloud: $(gcloud -v 2>&1 | head -n 1)"; fi
          if [[ "$(yarn -v)" == "1."* ]]; then
            echo "::set-output name=yarn-dir::$(yarn cache dir)"
          fi

      - if: ${{ steps.env-info.outputs.yarn-dir }}
        uses: actions/cache@v2
        with:
          path: ${{ steps.env-info.outputs.yarn-dir }}
          # Don't use **/yarn.lock because it scans yarn.lock in node_modules
          # c.f. https://github.com/AllanChain/blog/issues/98
          key: ${{ runner.os }}-yarn-v1-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-v1-
      - uses: actions/cache@v2
        with:
          path: .yarn
          # Don't use **/yarn.lock because it scans yarn.lock in node_modules
          # c.f. https://github.com/AllanChain/blog/issues/98
          key: ${{ runner.os }}-yarn-berry-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-berry-
      - uses: actions/cache@v2
        with:
          path: ~/.cache/firebase/emulators
          # Don't use **/yarn.lock because it scans yarn.lock in node_modules
          # c.f. https://github.com/AllanChain/blog/issues/98
          key: ${{ runner.os }}-firebase-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-firebase-
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('packages/recommender/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - run: yarn install
      - run: |
          if [[ "$(cat package.json)" == *'"setup-ci":'* ]]; then
            yarn setup-ci
          elif [[ "$(cat package.json)" == *'"setup":'* ]]; then
            yarn setup
          fi
      - run: if [[ "$(cat package.json)" == *'"typecheck":'* ]]; then yarn typecheck; fi
      - run: if [[ "$(cat package.json)" == *'"lint":'* ]]; then yarn lint; fi
      - run: if [[ "$(cat package.json)" == *'"test":'* ]]; then yarn test; fi
      - run: if [[ "$(cat package.json)" == *'"build":'* ]]; then yarn build; fi
      - run: |
          if [[ "$(cat package.json)" == *'"lint-staged":'* ]]; then
            for file in $(ls package.json packages/*/package.json); do
              sed -i -e 's/"name":/"name" :/' $file
              git add -A
            done
            yarn lint-staged --allow-empty
          fi
      - if: ${{ env.GITHUB_TOKEN != '' }}
        run: |
          if [[ "$(cat package.json)" == *'"semantic-release":'* ]]; then
            if [[ "$(cat package.json)" == *'"release-test":'* ]]; then
              yarn release-test
            else
              yarn semantic-release --dry-run
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - if: ${{ inputs.artifact_path }}
        uses: actions/upload-artifact@v3
        with:
          name: test-artifact
          path: ${{ inputs.artifact_path }}
