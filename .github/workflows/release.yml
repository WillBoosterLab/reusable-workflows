name: Release

on:
  workflow_call:
    inputs:
      dot_env_path:
        default: .env
        required: false
        type: string
      environment:
        required: false
        type: string
      github_hosted_runner:
        required: false
        type: boolean
      ignore_renovate:
        required: false
        type: boolean
      runs_on:
        required: false
        type: string
      skip_build:
        required: false
        type: boolean
      target_organization:
        required: false
        type: string
    secrets:
      DISCORD_WEBHOOK_URL:
        required: false
      DOT_ENV:
        required: false
      GH_TOKEN:
        required: true
      NPM_TOKEN:
        required: false

jobs:
  release:
    if: ${{ (!inputs.target_organization || github.repository_owner == inputs.target_organization) && (!inputs.ignore_renovate || (github.event.head_commit.author.username != 'renovate-bot' && github.event.head_commit.author.username != 'renovate[bot]')) }}
    runs-on: ${{ (inputs.runs_on && fromJSON(inputs.runs_on)) || ((!github.event.repository.private || inputs.github_hosted_runner) && 'ubuntu-latest') || fromJSON('["self-hosted", "medium"]') }}
    env:
      FORCE_COLOR: 3
      # arguments
      HAS_DISCORD_WEBHOOK_URL: ${{ !!secrets.DISCORD_WEBHOOK_URL }}
      HAS_DOT_ENV: ${{ !!secrets.DOT_ENV }}
      WB_ENV: ${{ inputs.environment }}
    steps:
      - name: Add Homebrew to PATH for Apple Silicon
        run: echo "/opt/homebrew/bin" >> $GITHUB_PATH
      - uses: actions/checkout@v4
      - if: ${{ env.HAS_DOT_ENV == 'true' }}
        run: echo '${{ secrets.DOT_ENV }}' > ${{ inputs.dot_env_path }}
      - name: Check version files
        id: check-ver
        run: |
          if [[ -f .tool-versions || -f .node-version || -f .python-version ]]; then
            echo "exist-any-version=1" >> $GITHUB_OUTPUT
          fi
          if [[ -f .node-version || "$(cat .tool-versions)" == *'nodejs'* ]]; then
            echo "exist-nodejs-version=1" >> $GITHUB_OUTPUT
          fi
      - if: ${{ !steps.check-ver.outputs.exist-nodejs-version }}
        uses: actions/setup-node@v4
        with:
          check-latest: true
          node-version: ${{ matrix.node-version || 22 }}
      - if: ${{ steps.check-ver.outputs.exist-any-version }}
        uses: willbooster/asdf-actions/install@main
      - name: Show environment information
        id: env-info
        # https://stackoverflow.com/a/677212
        run: |
          echo "WB_ENV: $WB_ENV"
          echo "node: $(node -v)"
          echo "npm: $(npm -v)"
          if [[ -f bunfig.toml ]] && grep -q bun .tool-versions; then
            echo "bun: $(bun -v)"
            echo "runner=bun" >> $GITHUB_OUTPUT
          else
            YARN=$(yarn -v); echo "yarn: $YARN"
            if [[ "$YARN" == "1."* ]]; then
              echo "yarn-dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
            fi
            echo "runner=yarn" >> $GITHUB_OUTPUT
          fi

      - if: ${{ steps.env-info.outputs.yarn-dir }}
        uses: actions/cache@v4
        with:
          path: ${{ steps.env-info.outputs.yarn-dir }}
          # Don't use **/yarn.lock because it scans yarn.lock in node_modules
          # c.f. https://github.com/AllanChain/blog/issues/98
          key: ${{ runner.os }}-yarn-v1-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-v1-

      - name: Install dependencies
        run: ${{ steps.env-info.outputs.runner }} install || true # To ignore postinstall errors
      - if: ${{ !inputs.skip_build }}
        name: Build
        run: if [[ "$(cat package.json)" == *'"build":'* ]]; then ${{ steps.env-info.outputs.runner }} run build; fi
      - name: Release
        run: |
          if [[ "$(cat package.json)" == *'"release":'* ]]; then
            ${{ steps.env-info.outputs.runner }} run release
          else
            ${{ steps.env-info.outputs.runner }} run semantic-release
          fi
        # Existing GITHUB_TOKEN cannot trigger release (published) event
        # We need to pass a personal token (e.g. secrets.GH_BOT_PAT) to secrets.GH_TOKEN
        # c.f. https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#triggering-new-workflows-using-a-personal-access-token
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          HUSKY: 0
          LEFTHOOK: 0

      - if: ${{ env.HAS_DISCORD_WEBHOOK_URL == 'true' }}
        run: |
          curl -X POST -H "Content-Type: application/json" \
               --data "{
                  \"username\": \"WillBooster Bot\",
                  \"avatar_url\": \"https://avatars.githubusercontent.com/u/98675783\",
                  \"content\": \"[${{ github.event.repository.name }}](${{ github.event.repository.html_url }})の最新版 ([$(git describe --always --tags)](https://github.com/${{ github.repository }}/commits/$(git describe --always --tags))) をリリースしました。\"
               }" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}
