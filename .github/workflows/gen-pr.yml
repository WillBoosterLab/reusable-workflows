name: Generate PR with gen-pr and LLMs

on:
  workflow_call:
    inputs:
      # for setup
      ci_label:
        default: medium
        required: false
        type: string
      github_hosted_runner:
        required: false
        type: boolean
      dot_env_path:
        default: .env
        required: false
        type: string
      target_organization:
        required: false
        type: string
      # for gen-pr
      issue-number:
        required: true
        type: number
      planning-model:
        required: false
        type: string
      two-staged-planning:
        required: false
        type: boolean
      reasoning-effort:
        required: false
        type: string
      coding-tool:
        required: true
        type: string
      repomix-extra-args:
        required: false
        type: string
        default: "--compress --remove-empty-lines --include '{src,prisma}/**/*.{ts,tsx},i18n/*.json,prisma/schema.prisma' --ignore '**/__generated__/'"
      aider-extra-args:
        required: false
        type: string
      test-command:
        required: false
        type: string
    secrets:
      DOT_ENV:
        required: false
      GH_TOKEN:
        required: true
      OPENAI_API_KEY:
        required: false
      ANTHROPIC_API_KEY:
        required: false
      GEMINI_API_KEY:
        required: false
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      XAI_API_KEY:
        required: false
      OPENROUTER_API_KEY:
        required: false
      CLAUDE_CODE_OAUTH_TOKEN:
        required: false

jobs:
  generate-pr:
    if: ${{ inputs.issue-number != null && (!inputs.target_organization || github.repository_owner == inputs.target_organization) }}
    runs-on: ${{ (inputs.runs_on && fromJSON(inputs.runs_on)) || ((!github.event.repository.private || inputs.github_hosted_runner) && 'ubuntu-latest') || fromJSON(format('["self-hosted", "{0}"]', inputs.ci_label)) }}
    env:
      # arguments
      HAS_DOT_ENV: ${{ !!secrets.DOT_ENV }}
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.GH_TOKEN }}
      - if: ${{ env.HAS_DOT_ENV == 'true' }}
        run: echo '${{ secrets.DOT_ENV }}' > ${{ inputs.dot_env_path }}

      - name: Check version files
        id: check-ver
        run: |
          if [[ -f .tool-versions || -f .node-version || -f .python-version ]]; then
            echo "exist-any-version=1" >> $GITHUB_OUTPUT
          fi
          if [[ -f .node-version ]] || grep -q nodejs .tool-versions; then
            echo "exist-nodejs-version=1" >> $GITHUB_OUTPUT
          fi
      - if: ${{ steps.check-ver.outputs.exist-any-version }}
        uses: willbooster/asdf-actions/install@main
      - name: Show environment information
        id: env-info
        # https://stackoverflow.com/a/677212
        run: |
          echo "concurrency-group: ${{ github.workflow }}-${{ github.ref }}"
          echo "WB_ENV: $WB_ENV"
          echo "node: $(node -v)"
          echo "npm: $(npm -v)"
          if [[ -f bunfig.toml ]] && grep -q bun .tool-versions; then
            echo "bun: $(bun -v)"
            echo "runner=bun" >> $GITHUB_OUTPUT
          else
            YARN=$(yarn -v); echo "yarn: $YARN"
            if [[ "$YARN" == "1."* ]]; then
              echo "yarn-dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
            fi
            echo "runner=yarn" >> $GITHUB_OUTPUT
          fi

          if PYTHON=$(python --version 2> /dev/null); then echo "python: $PYTHON"; fi
          if POETRY=$(poetry --version 2> /dev/null); then
            echo "poetry: $POETRY"
            poetry config virtualenvs.in-project true
          fi
      - name: Install dependencies
        run: |
          if [[ "${{ steps.env-info.outputs.runner }}" == "bun" ]]; then
            bun update
          else
            ${{ steps.env-info.outputs.runner }} install --no-immutable || true # To ignore postinstall errors
          fi
      - name: Remove .next directory
        run: rm -Rf .next
      - name: Run "common/ci-setup" npm script if exists
        run: if grep -q '"common/ci-setup":' package.json; then ${{ steps.env-info.outputs.runner }} run common/ci-setup; fi
      - name: Run "test/ci-setup" npm script if exists
        run: if grep -q '"test/ci-setup":' package.json; then ${{ steps.env-info.outputs.runner }} run test/ci-setup; fi
      - name: Build
        run: |
          if grep -q '"gen-code":' package.json; then
            ${{ steps.env-info.outputs.runner }} run gen-code || true
          fi
          if grep -q '"build/ci":' package.json; then
            ${{ steps.env-info.outputs.runner }} run build/ci || true
          elif grep -q '"build":' package.json; then
            ${{ steps.env-info.outputs.runner }} run build || true
          fi
      - name: Generate PR with LLMs
        uses: WillBooster/gen-pr@v2
        with:
          issue-number: ${{ inputs.issue-number }}
          planning-model: ${{ inputs.planning-model }}
          two-staged-planning: ${{ inputs.two-staged-planning }}
          reasoning-effort: ${{ inputs.reasoning-effort }}
          coding-tool: ${{ inputs.coding-tool }}
          repomix-extra-args: ${{ inputs.repomix-extra-args }}
          aider-extra-args: ${{ inputs.aider-extra-args }}
          test-command: ${{ inputs.test-command }}
          max-test-attempts: 5
          remove-pattern: '## Self Check[\s\S]*'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-2
          XAI_API_KEY: ${{ secrets.XAI_API_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
